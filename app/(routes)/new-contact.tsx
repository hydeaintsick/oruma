import { useState } from 'react';
import { View, Text, TextInput, StyleSheet, SafeAreaView, Alert } from 'react-native';
import { useRouter } from 'expo-router';
import { Theme } from '@/constants';
import { Contact, ContactCategory } from '@/db'; // Assuming ContactCategory is exported from db
import { Button as CustomButton } from '@/components/ui/Button'; // Assuming custom button
import { Picker } from '@react-native-picker/picker'; // For category selection

export default function NewContactScreen() {
  const router = useRouter();
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [category, setCategory] = useState<ContactCategory>('FRIEND'); // Default category
  const [isSaving, setIsSaving] = useState(false);

  const handleSaveContact = async () => {
    if (!firstName.trim()) {
      Alert.alert('Validation Error', 'First name is required.');
      return;
    }

    setIsSaving(true);
    try {
      await Contact.create({
        firstName: firstName.trim(),
        lastName: lastName.trim(),
        category,
        // nativeID can be omitted if it's optional or generated by the system/DB
      });
      Alert.alert('Success', 'Contact saved successfully!');
      router.back(); // Go back to the contacts list
    } catch (error) {
      console.error('Failed to save contact:', error);
      Alert.alert('Error', 'Failed to save contact. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.page}>
        <Text style={styles.title}>Create New Contact</Text>

        <TextInput
          style={styles.input}
          placeholder="First Name"
          placeholderTextColor={Theme.colors.lightGray}
          value={firstName}
          onChangeText={setFirstName}
        />

        <TextInput
          style={styles.input}
          placeholder="Last Name (Optional)"
          placeholderTextColor={Theme.colors.lightGray}
          value={lastName}
          onChangeText={setLastName}
        />

        <Text style={styles.pickerLabel}>Category:</Text>
        <View style={styles.pickerContainer}>
          <Picker
            selectedValue={category}
            style={styles.picker}
            onValueChange={(itemValue) => setCategory(itemValue as ContactCategory)}
            dropdownIconColor={Theme.colors.white} // For Android
          >
            {/* Assuming ContactCategory is an enum or object with string values */}
            {(Object.values(ContactCategory) as ContactCategory[]).map((cat) => (
              <Picker.Item key={cat} label={cat} value={cat} color={Theme.colors.black} /> // Item color for readability in picker
            ))}
          </Picker>
        </View>

        <CustomButton
          label={isSaving ? 'Saving...' : 'Save Contact'}
          onPress={handleSaveContact}
          disabled={isSaving}
          bgColor={Theme.colors.green}
          style={styles.saveButton}
        />

        <CustomButton
          label="Cancel"
          onPress={() => router.back()}
          bgColor={Theme.colors.red}
          style={styles.cancelButton}
          disabled={isSaving}
        />
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: Theme.colors.purple,
  },
  page: {
    flex: 1,
    padding: 20,
    alignItems: 'center', // Center items for a cleaner look
  },
  title: {
    fontSize: 24,
    fontFamily: Theme.fonts.bold,
    color: Theme.colors.white,
    marginBottom: 30,
    textAlign: 'center',
  },
  input: {
    width: '100%',
    backgroundColor: Theme.colors.deepPurple,
    color: Theme.colors.white,
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 8,
    marginBottom: 15,
    fontSize: 16,
    fontFamily: Theme.fonts.regular,
    borderWidth: 1,
    borderColor: Theme.colors.lightPurple,
  },
  pickerLabel: {
    fontSize: 16,
    fontFamily: Theme.fonts.semiBold,
    color: Theme.colors.white,
    alignSelf: 'flex-start',
    marginBottom: 5,
  },
  pickerContainer: {
    width: '100%',
    backgroundColor: Theme.colors.deepPurple,
    borderRadius: 8,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: Theme.colors.lightPurple,
  },
  picker: {
    width: '100%',
    color: Theme.colors.white, // Color for picker text (iOS)
    height: 50, // Standard height
  },
  saveButton: {
    width: '100%',
    marginTop: 10, // Add some margin
  },
  cancelButton: {
    width: '100%',
    marginTop: 15,
  },
});
